WHY I LOVE JAVA
JAVA IS UNARGUABLY ONE OF THE MOST POPULAR PROGRAMMING LANGUAGES IN THE WORLD TODAY. COMPANIES LIKE GOOGLE, AMAZON AND NETFLIX -- TO NAME A FEW BIG NAMES -- ARE USING JAVA TO BUILD LARGE PORTIONS OF THEIR INFRASTRUCTURE AND BACKEND SERVICES. BUT DESPITE ITS HUGE POPULARITY (OR PERHAPS BECAUSE OF IT) JAVA'S REPUTATION AMONG PROGRAMMERS IS SOMETHING OF A MIXED BAG. SOME SEEM TO GENUINELY LIKE IT WHILE OTHERS HATE IT.
PERSONALLY, AS SOMEONE WHO HAS BEEN USING THE LANGUAGE FOR MORE THAN A DECADE PROFESSIONALLY, I FIND IT TO BE AN EXCELLENT LANGUAGE. NO, IT ISN'T PERFECT. AND THE PROGRAMMING WORLD -- BEING YOUNG AS IT IS -- IS STILL LEARNING FROM ITS OWN MISTAKES. BUT ALL OTHER THINGS BEING EQUAL I THINK THAT JAVA GOT A LOT MORE RIGHT THAN WRONG.
FOLLOWING ARE SOME OF THE THINGS I THINK JAVA GOT RIGHT:
IT'S A PRODUCTIVE LANGUAGE

AS A PROGRAMMER I GET PAID TO SOLVE PROBLEMS. IN MINIMUM TIME AND MAXIMUM QUALITY. MY SOFTWARE IS EXPECTED TO BE ROBUST (BUG FREE), PERFORMANT AND MAINTAINABLE (EASILY EXTENDED). I TYPICALLY WRITE LARGE, DISTRIBUTED AND FAIRLY COMPLEX SERVER-SIDE SOFTWARE.
JAVA IS A PURELY OBJECT ORIENTED LANGUAGE. TO THE UNINITIATED, THIS MEANS THAT YOU DESIGN YOUR CODE AROUND UNIT OF CODES CALLED "OBJECTS" WHICH LOOSELY RESEMBLE REAL-WORLD OBJECT (OR CONCEPTS). SO IF YOU WERE TO WRITE, SAY, A LIBRARY MANAGEMENT SOFTWARE YOU'LL MOST LIKELY HAVE THESE CODE OBJECTS REPRESENTING BOOKS, MEMBERS, STAFF BUT ALSO MORE ABSTRACT CONCEPTS SUCH AS GENRE AND LOAN.
THIS HAPPENS TO BE A VERY NEAT WAY TO ORGANIZE SOFTWARE (AND YOUR THOUGHTS). INSTEAD OF THINKING ABOUT YOUR SYSTEM AS A BIG LINE-BY-LINE, STEP-BY-STEP ALGORITHM, YOU THINK OF IT AS A SET OF INTERACTING OBJECTS. IF DONE RIGHT, EACH ONE OF THESE OBJECTS CAN BE REASONED ABOUT INDEPENDENTLY FROM OTHER OBJECTS. EACH OBJECT CAN BE TESTED IN ISOLATION FROM OTHERS AND EACH ONE CAN BE EXTENDED WITHOUT NECESSARILY AFFECTING THE ENTIRE SYSTEM.
JAVA DID NOT INVENT THE IDEA OF OBJECT ORIENTED PROGRAMMING. IN FACT OOP DATES BACK TO THE LATE 60'S, BUT THE JAVA LANGUAGE DESIGNERS DID A GREAT JOB IMPLEMENTING THE IDEA IN THE LANGUAGE IN SUCH A WAY THAT IT IS PRACTICAL AND PRODUCTIVE FOR THE PROGRAMMER.

THE JAVA VIRTUAL MACHINE
ONE OF JAVA'S MOST CONVENIENT FEATURES IS THE JAVA VIRTUAL MACHINE (OR JVM). THE JVM ESSENTIALLY ACTS AS THE TRANSLATOR BETWEEN YOUR JAVA CODE AND THE PARTICULAR OPERATING SYSTEM THAT YOUR CODE IS RUNNING ON. THIS IS THE ORIGIN OF THE ONCE-FAMOUS JAVA MARKETING SLOGAN "WRITE ONCE, RUN ANYWHERE". WITHOUT THE JVM, YOU'D HAVE TO COMPILE YOUR CODE FOR EVERY OPERATING SYSTEM SEPARATELY. THE JVM GUARANTEES THAT YOUR JAVA CODE RUNS IDENTICALLY ON LINUX, MAC OR WINDOWS.
THE JAVA LANGUAGE DESIGNERS ALSO ENVISIONED A WORLD WHERE OTHER LANGUAGES CAN EXECUTE ON THE JVM BESIDES JAVA. TO THAT END THEY'VE SPECIFIED A LOW-LEVEL LANGUAGE (CALLED "BYTECODE") WHICH IS THE LANGUAGE THAT JAVA COMPLIES INTO AND THE STUFF THAT ACTUALLY GETS EXECUTED ON THE JVM. TODAY THERE ARE DOZENS OF LANGUAGES TARGETING THE JVM AS A RESULT.

AUTOMATIC MEMORY MANAGEMENT
IF YOU EVER USED A LANGUAGE SUCH AS C OR C++ THEN YOU ARE INTIMATELY FAMILIAR WITH THE PAINSTAKING EFFORT INVOLVED IN MANUALLY MANAGING MEMORY ALLOCATION (AND DEALLOCATIONS) IN YOUR PROGRAMS. THIS IS AN AREA, SO RIFE WITH BUGS THAT THE DESIGNERS OF THE JAVA PROGRAMMING LANGUAGE DECIDED TO DO AWAY WITH IT COMPLETELY. RATHER THAN GIVING THE PROGRAMMER THE OPPORTUNITY TO SHOOT THEMSELVES IN THE FOOT THEY DECIDED TO LET JAVA DO ALL THE MEMORY MANAGEMENT FOR THEM -- AUTOMATICALLY.
IN JAVA, THE PROGRAMMER SIMPLY CREATES WHATEVER OBJECTS THEY NEED (WITHOUT EXPLICITLY WORRYING ABOUT ALLOCATING MEMORY FOR IT) AND JAVA WILL AUTOMATICALLY RECLAIM THAT MEMORY ONCE THE OBJECT IS NO LONGER USED BY THE PROGRAM.
STANDING ON THE SHOULDERS OF GIANTS
JAVA WAS DESIGNED AND IMPLEMENTED BY SOME OF THE BRIGHTEST PEOPLE IN THE COMPUTER SCIENCE WORLD. PEOPLE SUCH A DOUG STEELE, JOSHUA BLOCH, MARK REINHOLD AND BRIAN GOETZ ARE TRUE MASTERS OF THEIR CRAFT AND ARE A CONSTANT SOURCE OF INSPIRATION AND LEARNING FOR ME. NOT JUST ABOUT JAVA PER SE, BUT MORE IMPORTANTLY, ABOUT WRITING BETTER SOFTWARE IN GENERAL.
HUGE COMMUNITY
AS OF THIS WRITING, ACCORDING TO WIKIPEDIA, THERE ARE 9 MILLION JAVA DEVELOPERS AROUND THE WORLD. THIS IS A HUGE ADVANTAGE BECAUSE FOR JUST ABOUT EVERY PROBLEM YOU RUN INTO AS A DEVELOPER THERE IS A HIGH LIKELIHOOD THAT SOMEONE, SOMEWHERE HAD ALREADY SOLVED A VARIATION OF THIS PROBLEM OR THAT VERY SAME PROBLEM. USUALLY A SIMPLE ONLINE SEARCH WILL REVEAL MULTIPLE SOURCES THAT CAN BE USED TO SOLVE OR AT THE VERY LEAST APPROACH THE PROBLEM.

FANTASTIC FRAMEWORKS & LIBRARIES
JAVA HAS AN ENORMOUS ARRAY OF FRAMEWORKS AND LIBRARIES TO CHOOSE FROM. FROM LOGGING, TO WEB DEVELOPMENT, TO DATABASE CONNECTIVITY, TO MESSAGING CLIENTS, THERE'S A LIBRARY (OR SEVERAL) TO HELP SOLVE JUST ABOUT ANY PROBLEM. A PARTICULAR FAVORITE OF MINE IS THE SPRING FRAMEWORK WHICH HAD BECOME THE DEFACTO FRAMEWORK FOR ANY SORT OF WORK INVOLVING WEB (HTTP) TECHNOLOGIES.
WRITING WEB APPLICATION USING "RAW" JAVA WOULD BE A TEDIOUS TASK, TO SAY THE LEAST. MOREOVER, THE DESIGNERS OF SPRING NOTICED THAT MANY PROGRAMMERS ARE TRYING TO SOLVE THE SAME (OR VERY SIMILAR) PROBLEMS AND EACH ONE IS SOLVING THESE PROBLEMS SLIGHTLY DIFFERENTLY. SPRING (AND ITS VAST PORTFOLIO OF SUB-PROJECTS) ARE MEANT TO GIVE THE PROGRAMMER A LEG-UP BY GIVING THEM A SOLID SET OF BUILDING BLOCKS TO BUILD UPON FOR THEIR PROJECTS.
CLOSING THOUGHTS
THERE ARE MANY FINE LANGUAGES TO CHOOSE FROM OUT THERE. JAVA IS JUST ONE OF THEM. THIS ARTICLE IS IN NO WAY TRYING TO CLAIM THAT "JAVA IS THE BEST" OR THAT "JAVA IS BETTER THAN X LANGUAGE". IT IS SIMPLY MEANT AS AN ACKNOWLEDGEMENT TO THE FINE WORK THAT MADE JAVA POSSIBLE.

1991 â€“ 1994: THE GREEN PROJECT, OAK PROTOTYPE, SHIFT IN FOCUS & RENAMING | HISTORY OF JAVA
1991: INITIATED AS THE GREEN PROJECT AT SUN MICROSYSTEMS BY JAMES GOSLING, MIKE SHERIDAN, AND PATRICK NAUGHTON. THE AIM WAS TO DEVELOP A LANGUAGE FOR SMALL, EMBEDDED DEVICES/ SMALL ELECTRICAL DEVICES.
1992: THE FIRST PROTOTYPE, CALLED OAK, WAS DEVELOPED, NAMED AFTER AN OAK TREE OUTSIDE GOSLING'S OFFICE.
1994: REALIZING THE POTENTIAL OF THE BURGEONING INTERNET, THE TEAM REFOCUSED ON CREATING A LANGUAGE FOR WEB-BASED APPLICATIONS. AROUND THE SAME TIME, THE LANGUAGE OAK WAS RENAMED JAVA TO AVOID TRADEMARK ISSUES.